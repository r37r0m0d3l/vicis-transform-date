{"version":3,"file":"vicis-transform-date.mjs","sources":["../src/index.mjs"],"sourcesContent":["import moment from \"moment\";\nmoment.suppressDeprecationWarnings = true;\n\nfunction transformDateTime(dateTime, config) {\n  if (!dateTime) {\n    throw new Error(`Invalid Date: ${dateTime}`);\n  }\n  if (typeof config === \"string\") {\n    config = { format: config };\n  }\n  const { format, keepLocalTime, keepOffset, unixTimestamp, utcOffset } = {\n    ...{\n      format: undefined,\n      keepLocalTime: true,\n      keepOffset: true,\n      unixTimestamp: false,\n      utcOffset: undefined,\n    },\n    ...config,\n  };\n  const instance = moment(dateTime);\n  if (!instance.isValid()) {\n    throw new Error(`Invalid Date: ${dateTime}`);\n  }\n  if (unixTimestamp === true) {\n    return instance.valueOf();\n  }\n  if (typeof format === \"string\") {\n    return instance.format(config.format);\n  }\n  if (Number.isInteger(utcOffset) || (utcOffset && typeof utcOffset === \"string\")) {\n    instance.utcOffset(utcOffset, keepLocalTime);\n  }\n  return instance.toISOString(keepOffset);\n}\n\nfunction VicisTransformDateToDateTime(config) {\n  return (date) => transformDateTime(date, config);\n}\n\nfunction VicisTransformDateToUnix() {\n  return (date) => transformDateTime(date, { unixTimestamp: true });\n}\n\nfunction VicisTransformDateToFormat(format) {\n  return (date) => transformDateTime(date, { format });\n}\n\nfunction VicisTransformDateToISO(keepLocalTime = true, keepOffset = true, utcOffset) {\n  return (date) => transformDateTime(date, { keepLocalTime, keepOffset, utcOffset });\n}\n\nconst VicisTransformDate = {\n  toDateTime: VicisTransformDateToDateTime,\n  toFormat: VicisTransformDateToFormat,\n  toISO: VicisTransformDateToISO,\n  toUnix: VicisTransformDateToUnix,\n  toFunction: () => VicisTransformDateToDateTime,\n};\n\nexport { VicisTransformDate };\n"],"names":["transformDateTime","dateTime","config","Error","format","keepLocalTime","keepOffset","unixTimestamp","utcOffset","undefined","instance","moment","isValid","valueOf","Number","isInteger","toISOString","VicisTransformDateToDateTime","date","suppressDeprecationWarnings","VicisTransformDate","toDateTime","toFormat","VicisTransformDateToFormat","toISO","VicisTransformDateToISO","toUnix","VicisTransformDateToUnix","toFunction"],"mappings":"sBAGA,SAASA,kBAAkBC,EAAUC,OAC9BD,QACG,IAAIE,MAAO,iBAAgBF,KAEb,iBAAXC,IACTA,EAAS,CAAEE,OAAQF,UAEfE,OAAEA,EAAFC,cAAUA,EAAVC,WAAyBA,EAAzBC,cAAqCA,EAArCC,UAAoDA,GAAc,CAEpEJ,YAAQK,EACRJ,eAAe,EACfC,YAAY,EACZC,eAAe,EACfC,eAAWC,KAEVP,GAECQ,EAAWC,EAAOV,OACnBS,EAASE,gBACN,IAAIT,MAAO,iBAAgBF,YAEb,IAAlBM,EACKG,EAASG,UAEI,iBAAXT,EACFM,EAASN,OAAOF,EAAOE,UAE5BU,OAAOC,UAAUP,IAAeA,GAAkC,iBAAdA,IACtDE,EAASF,UAAUA,EAAWH,GAEzBK,EAASM,YAAYV,IAG9B,SAASW,6BAA6Bf,UAC5BgB,GAASlB,kBAAkBkB,EAAMhB,GApC3CS,EAAOQ,6BAA8B,QAmD/BC,EAAqB,CACzBC,WAAYJ,6BACZK,SAVF,SAASC,2BAA2BnB,UAC1Bc,GAASlB,kBAAkBkB,EAAM,CAAEd,OAAAA,KAU3CoB,MAPF,SAASC,wBAAwBpB,GAAgB,EAAMC,GAAa,EAAME,UAChEU,GAASlB,kBAAkBkB,EAAM,CAAEb,cAAAA,EAAeC,WAAAA,EAAYE,UAAAA,KAOtEkB,OAhBF,SAASC,kCACCT,GAASlB,kBAAkBkB,EAAM,CAAEX,eAAe,KAgB1DqB,WAAY,IAAMX"}