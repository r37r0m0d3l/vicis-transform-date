{"version":3,"file":"vicis-transform-date.cjs","sources":["../src/index.mjs"],"sourcesContent":["import moment from \"moment\";\nmoment.suppressDeprecationWarnings = true;\n\nfunction transformDateTime(dateTime, config) {\n  if (!dateTime) {\n    throw new Error(`Invalid Date: ${dateTime}`);\n  }\n  if (typeof config === \"string\") {\n    config = { format: config };\n  }\n  const { format, keepLocalTime, keepOffset, unixTimestamp, utcOffset } = {\n    ...{\n      format: undefined,\n      keepLocalTime: true,\n      keepOffset: true,\n      unixTimestamp: false,\n      utcOffset: undefined,\n    },\n    ...config,\n  };\n  const instance = moment(dateTime);\n  if (!instance.isValid()) {\n    throw new Error(`Invalid Date: ${dateTime}`);\n  }\n  if (unixTimestamp === true) {\n    return instance.valueOf();\n  }\n  if (typeof format === \"string\") {\n    return instance.format(config.format);\n  }\n  if (Number.isInteger(utcOffset) || (utcOffset && typeof utcOffset === \"string\")) {\n    instance.utcOffset(utcOffset, keepLocalTime);\n  }\n  return instance.toISOString(keepOffset);\n}\n\n/**\n * @name vicisTransformDateToDateTime\n * @param {Object|String} config\n * @returns {function(*=): number | string}\n */\nfunction vicisTransformDateToDateTime(config) {\n  return (date) => transformDateTime(date, config);\n}\n\n/**\n * @name vicisTransformDateToUnix\n * @returns {function(*=): number | string}\n */\nfunction vicisTransformDateToUnix() {\n  return (date) => transformDateTime(date, { unixTimestamp: true });\n}\n\n/**\n * @name vicisTransformDateToFormat\n * @param {String} format\n * @returns {function(*=): number | string}\n */\nfunction vicisTransformDateToFormat(format) {\n  return (date) => transformDateTime(date, { format });\n}\n\n/**\n * @name vicisTransformDateToISO\n * @param {Boolean=true} keepLocalTime\n * @param {Boolean=true} keepOffset\n * @param {Number|String=} utcOffset\n * @returns {function(*=): number | string}\n */\nfunction vicisTransformDateToISO(keepLocalTime = true, keepOffset = true, utcOffset) {\n  return (date) => transformDateTime(date, { keepLocalTime, keepOffset, utcOffset });\n}\n\n/**\n * @type {{toFormat: (function(String): function(*=): number | string), toUnix: (function(): function(*=): number | string), toISO: (function(Boolean=, Boolean=, (Number|String)=): function(*=): number | string), toDateTime: (function((Object|String)): function(*=): number | string), toFunction: (function(): function((Object|String)): function(*=): number | string)}}\n */\nconst VicisTransformDate = {\n  toDateTime: vicisTransformDateToDateTime,\n  toFormat: vicisTransformDateToFormat,\n  toISO: vicisTransformDateToISO,\n  toUnix: vicisTransformDateToUnix,\n  toFunction: () => vicisTransformDateToDateTime,\n};\n\nexport { VicisTransformDate };\n"],"names":["transformDateTime","dateTime","config","Error","format","keepLocalTime","keepOffset","unixTimestamp","utcOffset","undefined","instance","moment","isValid","valueOf","Number","isInteger","toISOString","vicisTransformDateToDateTime","date","suppressDeprecationWarnings","VicisTransformDate","toDateTime","toFormat","vicisTransformDateToFormat","toISO","vicisTransformDateToISO","toUnix","vicisTransformDateToUnix","toFunction"],"mappings":"kLAGA,SAASA,kBAAkBC,EAAUC,OAC9BD,QACG,IAAIE,MAAO,iBAAgBF,KAEb,iBAAXC,IACTA,EAAS,CAAEE,OAAQF,UAEfE,OAAEA,EAAFC,cAAUA,EAAVC,WAAyBA,EAAzBC,cAAqCA,EAArCC,UAAoDA,GAAc,CAEpEJ,YAAQK,EACRJ,eAAe,EACfC,YAAY,EACZC,eAAe,EACfC,eAAWC,KAEVP,GAECQ,EAAWC,EAAOV,OACnBS,EAASE,gBACN,IAAIT,MAAO,iBAAgBF,YAEb,IAAlBM,EACKG,EAASG,UAEI,iBAAXT,EACFM,EAASN,OAAOF,EAAOE,UAE5BU,OAAOC,UAAUP,IAAeA,GAAkC,iBAAdA,IACtDE,EAASF,UAAUA,EAAWH,GAEzBK,EAASM,YAAYV,IAQ9B,SAASW,6BAA6Bf,UAC5BgB,GAASlB,kBAAkBkB,EAAMhB,GAzC3CS,EAAOQ,6BAA8B,QA2E/BC,EAAqB,CACzBC,WAAYJ,6BACZK,SApBF,SAASC,2BAA2BnB,UAC1Bc,GAASlB,kBAAkBkB,EAAM,CAAEd,OAAAA,KAoB3CoB,MAVF,SAASC,wBAAwBpB,GAAgB,EAAMC,GAAa,EAAME,UAChEU,GAASlB,kBAAkBkB,EAAM,CAAEb,cAAAA,EAAeC,WAAAA,EAAYE,UAAAA,KAUtEkB,OA/BF,SAASC,kCACCT,GAASlB,kBAAkBkB,EAAM,CAAEX,eAAe,KA+B1DqB,WAAY,IAAMX"}